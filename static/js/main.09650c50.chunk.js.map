{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","board","createBoard","y","numRows","row","x","numCols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","hasWon","tblBoard","flipCellsAround","classsName","makeTable","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAyBeA,G,wDAfb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,wDAIPC,GAEVC,KAAKJ,MAAMK,sB,+BAGX,IAAIC,EAAU,QAAUF,KAAKJ,MAAMO,MAAQ,YAAc,IAEzD,OAAO,oBAAIC,UAAWF,EAASG,QAASL,KAAKH,kB,GAZ9BS,cCgBbC,G,wDAQJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAEDY,MAAQ,CACXC,MAAO,EAAKC,eAJG,E,0DAWjB,IAFA,IAAID,EAAQ,GAEHE,EAAI,EAAGA,EAAIX,KAAKJ,MAAMgB,QAASD,IAAK,CAE3C,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAId,KAAKJ,MAAMmB,QAASD,IACtCD,EAAIG,KAAKC,KAAKC,SAAWlB,KAAKJ,MAAMuB,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,I,sCAGOW,GAAQ,IAAD,EACMpB,KAAKJ,MAA1BmB,EADe,EACfA,QAASH,EADM,EACNA,QACXH,EAAQT,KAAKQ,MAAMC,MAFF,EAGRW,EAAMC,MAAM,KAAKC,IAAIC,QAHb,mBAGhBZ,EAHgB,KAGbG,EAHa,KAIrB,SAASU,EAASb,EAAGG,GAEfA,GAAK,GAAKA,EAAIC,GAAWJ,GAAK,GAAKA,EAAIC,IACzCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAI5BU,EAASb,EAAGG,GACZU,EAASb,EAAGG,EAAI,GAChBU,EAASb,EAAGG,EAAI,GAChBU,EAASb,EAAI,EAAGG,GAChBU,EAASb,EAAI,EAAGG,GAKhBL,EAAMgB,OAAM,SAAAZ,GAAG,OAAIA,EAAIY,OAAM,SAAAC,GAAI,OAAKA,QAEtC1B,KAAK2B,SAAS,CAAElB,MAAOA,EAAOmB,QAHjB,M,kCASb,IAFW,IAAD,OACNC,EAAW,GACNlB,EAAI,EAAGA,EAAIX,KAAKJ,MAAMgB,QAASD,IAAK,CAE3C,IADA,IAAIE,EAAM,GADiC,WAElCC,GACP,IAAIM,EAAK,UAAMT,EAAN,YAAWG,GACpBD,EAAIG,KACF,cAAC,EAAD,CAEEb,MAAO,EAAKK,MAAMC,MAAME,GAAGG,GAC3Bb,kBAAmB,kBAAM,EAAK6B,gBAAgBV,KAFzCA,KAJFN,EAAI,EAAGA,EAAId,KAAKJ,MAAMmB,QAASD,IAAM,EAArCA,GAUTe,EAASb,KAAK,6BAAaH,GAAJF,IAEzB,OACE,uBAAOP,UAAU,QAAjB,SACE,gCAAQyB,Q,+BAKZ,OACE,8BACG7B,KAAKQ,MAAMoB,OACV,sBAAKxB,UAAU,SAAf,UACE,sBAAMA,UAAU,cAAhB,iBACA,sBAAM2B,WAAW,YAAjB,iCAGF,gCACE,sBAAK3B,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,oBACA,qBAAKA,UAAU,YAAf,oBAEDJ,KAAKgC,qB,GA3FE1B,cAAdC,EACG0B,aAAe,CACpBrB,QAAS,EACTG,QAAS,EACTI,oBAAqB,KA+FVZ,QChHA2B,E,uKARX,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJUE,aCUH6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.09650c50.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Cell.css\";\n/*This has no state- just 2 props:\n * -flipCellsAroundMe: a function recommend from the borad which flips this\n *  cell and the cells around it\n * -isLit: boolean, is this cell lit?\n *  This handleClick--by calling flipCellsAroundMe\n */\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(evt) {\n    //call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\nexport default Cell;\n","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/* Game board of Lights out\n   properties:\n   -numRow: number of rows of board\n   -numCol: number of columns of board\n   -chanceLightStarsOn: float, chance any cell is lit is lit at start of game\n   \n   *State:\n   - hasWon: boolean, true when board is all of\n   -board: array-of-arrays of true/false\n\n   For this board:\n\n    . . . \n    0 0 .\n    . . .  (where . is off and 0 is on)\n\n    This would be: [[f,f,f],[t,t,f],[f,f,f]]\n    This should render an HTML table of individaul <Cell/>\n    This doesnt handle any clicks --- clicks are on individual cells\n\n  */\n\nclass Board extends Component {\n  static defaultProps = {\n    numRows: 5,\n    numCols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  // todo: set initial state\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      board: this.createBoard()\n    };\n  }\n  //create a board numRows high/ numcols wide, each cell randomly lit\n  createBoard() {\n    let board = [];\n    //todo: create array of arrays -> true/false values\n    for (let y = 0; y < this.props.numRows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.numCols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n  //handle changing a cell: update & determine if winner\n  flipCellsAround(coord) {\n    let { numCols, numRows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n    function flipCell(y, x) {\n      //if this coord is actually on borad, flip it\n      if (x >= 0 && x < numCols && y >= 0 && y < numRows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    //todo: determine is game as been won\n    let hasWon = false;\n    board.every(row => row.every(cell => !cell));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  /** Render game board or winning message. */\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.numRows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.numCols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className=\"winner\">\n            <span className=\"neon-orange\">YOU</span>\n            <span classsName=\"neon-blue\">WIN üëè</span>\n          </div>\n        ) : (\n          <div>\n            <div className=\"Board-title\">\n              <div className=\"neon-orange\">Lights</div>\n              <div className=\"neon-blue\">Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}